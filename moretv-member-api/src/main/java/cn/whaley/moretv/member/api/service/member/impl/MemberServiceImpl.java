package cn.whaley.moretv.member.api.service.member.impl;

import cn.whaley.moretv.member.api.dto.member.MemberInfoResponse;
import cn.whaley.moretv.member.api.dto.member.MemberStatusResponse;
import cn.whaley.moretv.member.api.service.member.MemberService;
import cn.whaley.moretv.member.api.service.member.MemberUserAuthorityService;
import cn.whaley.moretv.member.api.util.ResponseHandler;
import cn.whaley.moretv.member.base.constant.ApiCodeEnum;
import cn.whaley.moretv.member.base.constant.GlobalEnum;
import cn.whaley.moretv.member.base.dto.response.ResultResponse;
import cn.whaley.moretv.member.mapper.member.MemberMapper;
import cn.whaley.moretv.member.model.member.Member;
import cn.whaley.moretv.member.model.member.MemberUserAuthority;
import cn.whaley.moretv.member.service.member.impl.BaseMemberServiceImpl;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

/**
* ServiceImpl: MemberServiceImpl
* Mapper : MemberMapper
* Model  : Member
*
* This ServiceImpl generated by MyBatis Generator Extend at 2017-03-30 17:05:25
*/
@Service
@Transactional
public class MemberServiceImpl extends BaseMemberServiceImpl implements MemberService {

    @Autowired
    private MemberMapper memberMapper;

    @Autowired
    private MemberUserAuthorityService memberUserAuthorityService;

    @Override
    public ResultResponse<List<MemberStatusResponse>> getAllMemberInfo(Integer accountId) {
        List<MemberStatusResponse> statusResponseList = Lists.newArrayList();
        Date now = new Date();

        //会员模型
        List<Member> members = getMemberList();
        if (members.isEmpty()) {
            return ResultResponse.define(ApiCodeEnum.API_DATA_NOT_EXIST);
        }

        //会员权益
        List<MemberUserAuthority> authorityList = memberUserAuthorityService.getMemberUserAuthority(accountId);

        for (Member member : members) {
            MemberStatusResponse memberStatus = new MemberStatusResponse();
            memberStatus.setMemberCode(member.getCode());
            memberStatus.setMemberName(member.getName());

            GlobalEnum.MemberStatus status = GlobalEnum.MemberStatus.NOT_OPEN;

            for (MemberUserAuthority authority : authorityList) {
                if (authority != null
                        && GlobalEnum.StatusText.VALID.getCode().equals(authority.getStatus())
                        && member.getCode().equals(authority.getMemberCode())) {
                    memberStatus.setStartTime(authority.getStartTime());
                    memberStatus.setEndTime(authority.getEndTime());

                    if (authority.getEndTime().getTime() - now.getTime() > 1) {
                        status = GlobalEnum.MemberStatus.OPEN;
                    } else {
                        status = GlobalEnum.MemberStatus.EXPIRED;
                    }
                    break;
                }
            }
            memberStatus.setMemberStatus(status.getCode());
            memberStatus.setMemberStatusName(status.getName());
            statusResponseList.add(memberStatus);
        }

        return ResultResponse.success(statusResponseList);
    }

    @Override
    public ResultResponse<List<MemberInfoResponse>> getMemberInfo(Integer accountId) {
        List<MemberInfoResponse> infoResponseList = Lists.newArrayList();
        Date now = new Date();

        List<MemberUserAuthority> authorityList = memberUserAuthorityService.getMemberUserAuthority(accountId);
        if (authorityList.isEmpty()) {
            return ResultResponse.define(ApiCodeEnum.API_DATA_NOT_EXIST);
        }

        for (MemberUserAuthority authority : authorityList) {
            //有效会员权益
            if (authority != null
                    && GlobalEnum.StatusText.VALID.getCode().equals(authority.getStatus())
                    && (authority.getEndTime().getTime() - now.getTime() > 1)) {
                MemberInfoResponse response = ResponseHandler.copyProperties(authority, MemberInfoResponse.class);
                infoResponseList.add(response);
            }
        }
        return ResultResponse.success(infoResponseList);
    }

    @Override
    public Boolean accountIsMember(Integer accountId) {
        ResultResponse<List<MemberInfoResponse>> response = getMemberInfo(accountId);
        if (response.isSuccess() && !response.getData().isEmpty()) {
            return true;
        }
        return false;
    }

    @Override
    public MemberMapper getGenericMapper() {
        return memberMapper;
    }

}