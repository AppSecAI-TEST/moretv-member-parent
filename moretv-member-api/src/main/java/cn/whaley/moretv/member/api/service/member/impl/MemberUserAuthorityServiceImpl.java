package cn.whaley.moretv.member.api.service.member.impl;

import cn.whaley.moretv.member.api.service.member.MemberUserAuthorityService;
import cn.whaley.moretv.member.base.constant.CacheKeyConstant;
import cn.whaley.moretv.member.base.service.impl.GenericServiceImpl;
import cn.whaley.moretv.member.mapper.member.MemberUserAuthorityMapper;
import cn.whaley.moretv.member.model.member.MemberUserAuthority;
import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.List;


/**
* ServiceImpl: MemberUserAuthorityServiceImpl
* Mapper : MemberUserAuthorityMapper
* Model  : MemberUserAuthority
*
* This ServiceImpl generated by MyBatis Generator Extend at 2017-03-30 17:05:25
*/
@Service
@Transactional
public class MemberUserAuthorityServiceImpl extends GenericServiceImpl<MemberUserAuthority, Integer, MemberUserAuthorityMapper>
        implements MemberUserAuthorityService {

    @Autowired
    private MemberUserAuthorityMapper memberUserAuthorityMapper;

    @Autowired
    private RedisTemplate<String, String> redisTemplate;

    @Override
    public List<MemberUserAuthority> getMemberUserAuthority(String accountId) {
        List<MemberUserAuthority> list = Lists.newArrayList();
        HashOperations<String, String, String> opsHash = redisTemplate.opsForHash();

        String key = String.format(CacheKeyConstant.REDIS_KEY_MEMBER_AUTHORITY, accountId);
        List<String> authorityList = opsHash.values(key);
        if (CollectionUtils.isEmpty(authorityList)) {
            return list;
        }

        for (String value : authorityList) {
            MemberUserAuthority authority = JSON.parseObject(value, MemberUserAuthority.class);
            list.add(authority);
        }
        return list;
    }

    @Override
    public MemberUserAuthorityMapper getGenericMapper() {
        return memberUserAuthorityMapper;
    }

}